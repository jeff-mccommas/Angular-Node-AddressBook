{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.0');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const tabs = this._tabs.toArray();\n\n      // Maintain the previously-selected tab if a new tab is added or removed.\n      for (let i = 0; i < tabs.length; i++) {\n        if (tabs[i].isActive) {\n          // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n          // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n          // adding a tab within the `selectedIndexChange` event.\n          this._indexToSelect = this._selectedIndex = i;\n          break;\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @deletion-target 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  /**\n   * Current page path. Used to prefix SVG references which\n   * won't work on Safari unless they're prefixed with the path.\n   */\n  _currentPath: string;\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @deletion-target 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n    this._currentPath = location ? location.path() : '';\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @deletion-target 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    // If we're switching to `outline` from another appearance, we have to recalculate the gap.\n    if (value !== this._appearance && value === 'outline') {\n      this._initialGapCalculated = false;\n    }\n\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @deletion-target 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","Directive","args","selector","ViewContainerRef","MatTreeNodeOutlet","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","this","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","undefined","decorators","Attribute","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatInkBar","_setStyles","element","positions","_inkBarPositioner","inkBar","nativeElement","style","left","width","NgZone","Inject","_MAT_INK_BAR_POSITIONER","MatTabLabel","templateRef","viewContainerRef","TemplateRef","CdkPortal","MatTabContent","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","propDecorators","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","MatTabBodyPortal","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","_setTabFocus","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","_activeLinkChanged","runOutsideAngular","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_stateChanges","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","allowChildren","MatSort","CdkColumnDef","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatSlider","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_dirChangeSubscription","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","query","animateChild","MatDrawerContent","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_roundToDecimal","toString","split","pop","parseFloat","toFixed","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","MatSelect","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","_calculateOverlayOffsetY","scrollBuffer","maxScroll","optionOffsetFromPanelTop","itemHeight","_getItemHeight","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","_offsetY","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_currentPath","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","insertBefore","_outlet","outletElement","context","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withWrap","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","DomPortalOutlet","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","chip","MatChipListChange","MatChipList","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chips","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MatAutocomplete","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}